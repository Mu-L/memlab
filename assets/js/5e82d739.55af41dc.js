"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[213],{4415:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var n=a(7462),i=(a(7294),a(3905)),o=a(1698);var l=a(4844);const s={id:"guides-detached-dom"},r="Detached DOM",d={unversionedId:"guides/guides-detached-dom",id:"guides/guides-detached-dom",title:"Detached DOM",description:'We will be running the memlab against the following sample page which creates detached DOM elements when you click button "Create detached DOMs".',source:"@site/docs/guides/01-detached-dom.mdx",sourceDirName:"guides",slug:"/guides/guides-detached-dom",permalink:"/docs/guides/guides-detached-dom",draft:!1,editUrl:"https://github.com/facebookincubator/memlab/blob/main/website/docs/guides/01-detached-dom.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"guides-detached-dom"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Detect Unbound Object",permalink:"/docs/guides/guides-detect-unbound-object"}},c={},p=[{value:"Example Web App under Test",id:"example-web-app-under-test",level:2},{value:"1. Clone Repo",id:"1-clone-repo",level:2},{value:"2. Run the Example App",id:"2-run-the-example-app",level:2},{value:"3. Define a Scenario File",id:"3-define-a-scenario-file",level:2},{value:"4. Run memlab",id:"4-run-memlab",level:2}],m={toc:p};function u(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"detached-dom"},"Detached DOM"),(0,i.kt)("p",null,"We will be running the ",(0,i.kt)("inlineCode",{parentName:"p"},"memlab"),' against the following sample page which creates detached DOM elements when you click button "Create detached DOMs".\nEvery click we will create ',(0,i.kt)("inlineCode",{parentName:"p"},"1024")," detached DOM elements and keep the reference in the window object."),(0,i.kt)("h2",{id:"example-web-app-under-test"},"Example Web App under Test"),(0,i.kt)("p",null,"This is file is located at ",(0,i.kt)("inlineCode",{parentName:"p"},"packages/e2e/static/example/pages/examples/detached-dom.jsx")),(0,i.kt)(o.Z,{showLineNumbers:!0,language:"jsx",mdxType:"CodeBlock"},l.Z),(0,i.kt)("h2",{id:"1-clone-repo"},"1. Clone Repo"),(0,i.kt)("p",null,"Let's make sure the example app is running on your local machine. If you haven't cloned the project, please go ahead and clone the repo at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/memlab"},"memlab repo"),"."),(0,i.kt)("h2",{id:"2-run-the-example-app"},"2. Run the Example App"),(0,i.kt)("p",null,"Once you have a repo in your local machine, run the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# from the root directory of memlab project\nyarn build\ncd packages/e2e/static/example\nyarn && yarn dev\n")),(0,i.kt)("p",null,"This will spin up the example Nextjs app. Let's make sure it is running by hitting it from the browser ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000"),"."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The port number ",(0,i.kt)("inlineCode",{parentName:"p"},":3000")," may be different in your case."))),(0,i.kt)("h2",{id:"3-define-a-scenario-file"},"3. Define a Scenario File"),(0,i.kt)(o.Z,{language:"jsx",mdxType:"CodeBlock"},"// @nolint\n// memlab/packages/e2e/static/example/scenario/detached-dom.js\n/**\n * The initial `url` of the scenario we would like to run.\n */\nfunction url() {\n  return \"http://localhost:3000/examples/detached-dom\";\n}\n\n/**\n * Specify how memlab should perform action that you want\n * to test whether the action is causing memory leak.\n *\n * @param page - Puppeteer's [page object](https://pptr.dev/api/puppeteer.page/).\n */\nasync function action(page) {\n  const [button] = await page.$x(\n    \"//button[contains(., 'Create detached DOMs')]\"\n  );\n  if (button) {\n    await button.click();\n  }\n}\n\n/**\n * Specify how memlab should perform action that would\n * reset the action you performed above.\n *\n * @param page - Puppeteer's [page object](https://pptr.dev/api/puppeteer.page/).\n */\nasync function back(page) {\n  const [button] = await page.$x('a[href=\"/\"]');\n  if (button) {\n    await button.click();\n  }\n}\n\nmodule.exports = { action, back, url };\n"),(0,i.kt)("p",null,"Let's save this file at ",(0,i.kt)("inlineCode",{parentName:"p"},"~/memlab/scenarios/detached-dom.js"),"."),(0,i.kt)("h2",{id:"4-run-memlab"},"4. Run memlab"),(0,i.kt)("p",null,"This will take about a few minutes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"memlab run --scenario ~/memlab/scenarios/detached-dom.js\n")),(0,i.kt)("p",null,"The result will look like this.\n",(0,i.kt)("img",{alt:"memlab run result",src:a(1708).Z,width:"1612",height:"1062"}),"\nLet's break down the result from the top to down."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Red rectangle shows that actions (navigations) ",(0,i.kt)("inlineCode",{parentName:"li"},"memlab")," took as specified in our scenario file.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"page-load","[","6.2MB","]","(","baseline",")","[s1]")," - the heap size was ",(0,i.kt)("inlineCode",{parentName:"li"},"6.2MB")," on initial load. After clicking the ",(0,i.kt)("em",{parentName:"li"},"Create detached DOMs")," button, the heap was increased to ",(0,i.kt)("inlineCode",{parentName:"li"},"6.3MB")," and it stayed the same after navigating away."))),(0,i.kt)("li",{parentName:"ul"},"Overall summary of the leak trace.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"1024 leaks")," - it shows that there were 1024 leaks. You can see at line ",(0,i.kt)("inlineCode",{parentName:"li"},"12")," that we are creating ",(0,i.kt)("strong",{parentName:"li"},"1024")," detached DOM objects in for loop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Retained size")," - the total size of leaked objects is ",(0,i.kt)("inlineCode",{parentName:"li"},"143.3KB"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leakedObjects")," - this shows that leakedObjects were a property of ",(0,i.kt)("inlineCode",{parentName:"li"},"Window")," object with size ",(0,i.kt)("inlineCode",{parentName:"li"},"148.5KB")," pointing to an ",(0,i.kt)("inlineCode",{parentName:"li"},"Array")," object. Since it is not possible to show all 1024 leak traces in the result, ",(0,i.kt)("inlineCode",{parentName:"li"},"memlab")," only shows one represantative leak trace.\nIn short, the leak trace path from ",(0,i.kt)("inlineCode",{parentName:"li"},"window")," object to leaked object is:",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"[window](object) -> leakedObjects(property) -> [Array](object) -> 0(element) -> [Detached HTMLDIVElement](native)"))))))}u.isMDXComponent=!0},4844:(e,t,a)=>{a.d(t,{Z:()=>n});const n='// @nolint\n\nimport Link from \'next/link\';\nimport React from \'react\';\n\nexport default function DetachedDom() {\n\n  const addNewItem = () => {\n    if (!window.leakedObjects) {\n      window.leakedObjects = [];\n    }\n    for (let i = 0; i < 1024; i++) {\n      window.leakedObjects.push(document.createElement(\'div\'));\n    }\n    console.log(\'Detached DOMs are created. Please check Memory tab in devtools\')\n  };\n\n  return (\n    <div className="container">\n      <div className="row">\n        <Link href="/">Go back</Link>\n      </div>\n      <br />\n      <div className="row">\n        <button type="button" className="btn" onClick={addNewItem}>\n          Create detached DOMs\n        </button>\n      </div>\n    </div>\n  );\n}\n'},1708:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/memlab-result-f1c4af2fd9b366597f5b045b33cc3657.png"}}]);