"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[3217],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(b,s(s({ref:n},c),{},{components:t})):a.createElement(b,s({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={},s="Installation",o={unversionedId:"installation",id:"installation",title:"Installation",description:"Prequisites",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/memlab/docs/installation",draft:!1,editUrl:"https://github.com/facebookincubator/memlab/blob/main/website/docs/installation.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Why memlab",permalink:"/memlab/docs/intro"},next:{title:"Getting Started",permalink:"/memlab/docs/getting-started"}},l={},p=[{value:"Prequisites",id:"prequisites",level:2},{value:"Commands",id:"commands",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g memlab\n")),(0,r.kt)("h2",{id:"prequisites"},"Prequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," version 14 or above"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/"},"Npm"))),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("p",null,"To check if the installation complete, run ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab help")," in your console,\nyou should see helper text as follows (view the documentation\nfor each command ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/cli/CLI-commands"},"here"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ memlab help\n\n  memlab: memory leak detector for front-end JS\n\n  COMMON COMMANDS\n\n    memlab run --scenario <TEST_SCENARIO_FILE>\n    Find memory leaks in web apps\n    Options: --work-dir --headful --full --skip-screenshot --skip-gc\n             --skip-scroll --skip-extra-ops --local-puppeteer\n             --scenario --device --disable-xvfb --leak-filter\n             --trace-object-size-above\n             --ignore-leak-cluster-size-below --trace-all-objects\n             --save-trace-as-unclassified-cluster --ml-clustering\n             --ml-linkage-max-dist --ml-clustering-max-df\n\n    memlab list\n    List all test scenarios\n\n    memlab trace --node-id=<HEAP_OBJECT_ID>\n    Report retainer trace of a specific node, use with --nodeId\n    Options: --snapshot --snapshot-dir --engine --node-id\n\n    memlab find-leaks\n    Find memory leaks in heap snapshots\n    Options: --baseline --target --final --snapshot-dir --engine\n             --leak-filter --trace-object-size-above\n             --ignore-leak-cluster-size-below --trace-all-objects\n             --save-trace-as-unclassified-cluster --ml-clustering\n             --ml-linkage-max-dist --ml-clustering-max-df --work-dir\n\n    memlab analyze <PLUGIN_NAME> [PLUGIN_OPTIONS]\n    Run heap analysis plugins\n    Options: --work-dir\n\n    memlab help <COMMAND> [SUB-COMMANDS]\n    List all MemLab CLI commands or print helper text for a specific command\n\n    memlab heap --snapshot <HEAP_SNAPSHOT_FILE>\n    Interactive command to explore a single heap snapshot\n    Options: --snapshot --engine\n\n\n  MISC COMMANDS\n\n    memlab version\n    Show the versions of all memlab packages installed\n\n    memlab reset\n    Reset and initialize all directories\n    Options: --work-dir\n\n    memlab measure --scenario <TEST_SCENARIO_FILE>\n    Run test scenario in measure mode\n    Options: --headful --run-num --app --interaction --full\n             --skip-snapshot --skip-screenshot --skip-gc --skip-scroll\n             --skip-extra-ops --run-mode --local-puppeteer --scenario\n             --device --disable-xvfb --work-dir\n\n    memlab warmup --scenario <TEST_SCENARIO_FILE>\n    Warm up the target app\n    Options: --headful --app --interaction --run-mode\n             --local-puppeteer --scenario --device --disable-xvfb\n             --skip-warmup --work-dir\n\n    memlab get-default-work-dir\n    Query the default working directory\n\n    memlab snapshot --scenario <TEST_SCENARIO_FILE>\n    Interact with web app and take heap snapshots\n    Options: --headful --app --interaction --full --skip-snapshot\n             --skip-screenshot --skip-gc --skip-scroll\n             --skip-extra-ops --run-mode --local-puppeteer --scenario\n             --device --disable-xvfb --work-dir\n\n    memlab warmup-and-snapshot\n    Warm up server and take heap snapshots\n    Options: --work-dir --headful --app --interaction --run-mode\n             --local-puppeteer --scenario --device --disable-xvfb\n             --skip-warmup --full --skip-snapshot --skip-screenshot\n             --skip-gc --skip-scroll --skip-extra-ops\n")))}m.isMDXComponent=!0}}]);