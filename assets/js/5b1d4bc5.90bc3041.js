"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[202],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>h});var t=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=t.createContext({}),p=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},m=function(e){var a=p(e.components);return t.createElement(o.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(n),h=s,u=d["".concat(o,".").concat(h)]||d[h]||c[h]||i;return n?t.createElement(u,l(l({ref:a},m),{},{components:n})):t.createElement(u,l({ref:a},m))}));function h(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var i=n.length,l=new Array(i);l[0]=d;var r={};for(var o in a)hasOwnProperty.call(a,o)&&(r[o]=a[o]);r.originalType=e,r.mdxType="string"==typeof e?e:s,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},758:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var t=n(7462),s=(n(7294),n(3905));const i={id:"heap_analysis_src",title:"Module: heap-analysis/src",sidebar_label:"heap-analysis/src",sidebar_position:0,custom_edit_url:null},l=void 0,r={unversionedId:"api/modules/heap_analysis_src",id:"api/modules/heap_analysis_src",title:"Module: heap-analysis/src",description:"Classes",source:"@site/docs/api/modules/heap_analysis_src.md",sourceDirName:"api/modules",slug:"/api/modules/heap_analysis_src",permalink:"/docs/api/modules/heap_analysis_src",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"heap_analysis_src",title:"Module: heap-analysis/src",sidebar_label:"heap-analysis/src",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"api/src",permalink:"/docs/api/modules/api_src"},next:{title:"BrowserInteractionResultReader",permalink:"/docs/api/classes/api_src.BrowserInteractionResultReader"}},o={},p=[{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:'<a id="heapanalysisoptions" name="heapanalysisoptions"></a> <strong>HeapAnalysisOptions</strong>: <code>Object</code>',id:"-heapanalysisoptions-object",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Functions",id:"functions",level:2},{value:'<a id="aggregatedominatormetrics"></a><strong>aggregateDominatorMetrics</strong>(<code>ids</code>, <code>snapshot</code>, <code>checkNodeCb</code>, <code>nodeMetricsCb</code>)',id:"aggregatedominatormetricsids-snapshot-checknodecb-nodemetricscb",level:3},{value:'<a id="getsnapshotdirforanalysis"></a><strong>getSnapshotDirForAnalysis</strong>(<code>options</code>)',id:"getsnapshotdirforanalysisoptions",level:3},{value:'<a id="getsnapshotfileforanalysis"></a><strong>getSnapshotFileForAnalysis</strong>(<code>options</code>)',id:"getsnapshotfileforanalysisoptions",level:3},{value:'<a id="loadheapsnapshot"></a><strong>loadHeapSnapshot</strong>(<code>options</code>)',id:"loadheapsnapshotoptions",level:3},{value:'<a id="snapshotmapreduce"></a><strong>snapshotMapReduce</strong>&lt;<code>T1</code>, <code>T2</code>&gt;(<code>mapCallback</code>, <code>reduceCallback</code>, <code>options</code>)',id:"snapshotmapreducet1-t2mapcallback-reducecallback-options",level:3},{value:"Type parameters",id:"type-parameters",level:4}],m={toc:p};function c(e){let{components:a,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.BaseAnalysis"},"BaseAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.CollectionsHoldingStaleAnalysis"},"CollectionsHoldingStaleAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.DetachedDOMElementAnalysis"},"DetachedDOMElementAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.GlobalVariableAnalysis"},"GlobalVariableAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ObjectFanoutAnalysis"},"ObjectFanoutAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ObjectShallowAnalysis"},"ObjectShallowAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ObjectShapeAnalysis"},"ObjectShapeAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ObjectSizeAnalysis"},"ObjectSizeAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ObjectUnboundGrowthAnalysis"},"ObjectUnboundGrowthAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.ShapeUnboundGrowthAnalysis"},"ShapeUnboundGrowthAnalysis")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/classes/heap_analysis_src.StringAnalysis"},"StringAnalysis"))),(0,s.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,s.kt)("h3",{id:"-heapanalysisoptions-object"},(0,s.kt)("a",{id:"heapanalysisoptions",name:"heapanalysisoptions"})," ",(0,s.kt)("strong",{parentName:"h3"},"HeapAnalysisOptions"),": ",(0,s.kt)("inlineCode",{parentName:"h3"},"Object")),(0,s.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"args")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"ParsedArgs"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"config?")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"MemLabConfig"))))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L26"},"heap-analysis/src/PluginUtils.ts:26"))))),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("h3",{id:"aggregatedominatormetricsids-snapshot-checknodecb-nodemetricscb"},(0,s.kt)("a",{id:"aggregatedominatormetrics"}),(0,s.kt)("strong",{parentName:"h3"},"aggregateDominatorMetrics"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"ids"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"snapshot"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"checkNodeCb"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"nodeMetricsCb"),")"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ids"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Set"),"<",(0,s.kt)("inlineCode",{parentName:"li"},"number"),">"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"snapshot"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"IHeapSnapshot")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"checkNodeCb"),": (",(0,s.kt)("inlineCode",{parentName:"li"},"node"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"IHeapNode"),") => ",(0,s.kt)("inlineCode",{parentName:"li"},"boolean")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"nodeMetricsCb"),": (",(0,s.kt)("inlineCode",{parentName:"li"},"node"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"IHeapNode"),") => ",(0,s.kt)("inlineCode",{parentName:"li"},"number")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"number")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L489"},"heap-analysis/src/PluginUtils.ts:489"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getsnapshotdirforanalysisoptions"},(0,s.kt)("a",{id:"getsnapshotdirforanalysis"}),(0,s.kt)("strong",{parentName:"h3"},"getSnapshotDirForAnalysis"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"options"),")"),(0,s.kt)("p",null,"Get the absolute path of the directory holding all the heap snapshot files\npassed to the hosting heap analysis via ",(0,s.kt)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,s.kt)("p",null,"This API is supposed to be used within the overridden ",(0,s.kt)("inlineCode",{parentName:"p"},"process")," method\nof an ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,s.kt)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Nullable"),"<",(0,s.kt)("inlineCode",{parentName:"li"},"string"),">"," | the absolute path of the directory"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Examples:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {getSnapshotFileForAnalysis, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const directory = getSnapshotDirForAnalysis(options);\n  }\n}\n")),(0,s.kt)("p",null,"Use the following code to invoke the heap analysis:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,s.kt)("p",null,"The new heap analysis can also be used with ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,s.kt)("inlineCode",{parentName:"p"},"getSnapshotDirForAnalysis")," use the snapshot directory from\n",(0,s.kt)("a",{parentName:"p",href:"/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L329"},"heap-analysis/src/PluginUtils.ts:329"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getsnapshotfileforanalysisoptions"},(0,s.kt)("a",{id:"getsnapshotfileforanalysis"}),(0,s.kt)("strong",{parentName:"h3"},"getSnapshotFileForAnalysis"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"options"),")"),(0,s.kt)("p",null,"Get the heap snapshot file's absolute path passed to the hosting heap\nanalysis via ",(0,s.kt)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,s.kt)("p",null,"This API is supposed to be used within the overridden ",(0,s.kt)("inlineCode",{parentName:"p"},"process")," method\nof an ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,s.kt)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"string")," | the absolute path of the heap snapshot file"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Examples:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {getSnapshotFileForAnalysis, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const file = getSnapshotFileForAnalysis(options);\n  }\n}\n")),(0,s.kt)("p",null,"Use the following code to invoke the heap analysis:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,s.kt)("p",null,"The new heap analysis can also be used with ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,s.kt)("inlineCode",{parentName:"p"},"getSnapshotFileForAnalysis")," will use the last heap snapshot in alphanumerically\nascending order from ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L275"},"heap-analysis/src/PluginUtils.ts:275"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"loadheapsnapshotoptions"},(0,s.kt)("a",{id:"loadheapsnapshot"}),(0,s.kt)("strong",{parentName:"h3"},"loadHeapSnapshot"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"options"),")"),(0,s.kt)("p",null,"Load the heap graph based on the single JavaScript heap snapshot\npassed to the hosting heap analysis via ",(0,s.kt)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,s.kt)("p",null,"This API is supposed to be used within the ",(0,s.kt)("inlineCode",{parentName:"p"},"process")," implementation\nof an ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,s.kt)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"li"},"IHeapSnapshot"),">"," | the graph representation of the heap"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Examples:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {loadHeapSnapshot, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const heap = await loadHeapSnapshot(options);\n    // doing heap analysis\n  }\n}\n")),(0,s.kt)("p",null,"Use the following code to invoke the heap analysis:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,s.kt)("p",null,"The new heap analysis can also be used with ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,s.kt)("inlineCode",{parentName:"p"},"loadHeapSnapshot")," will use the last heap snapshot in alphanumerically\nascending order from ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L383"},"heap-analysis/src/PluginUtils.ts:383"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"snapshotmapreducet1-t2mapcallback-reducecallback-options"},(0,s.kt)("a",{id:"snapshotmapreduce"}),(0,s.kt)("strong",{parentName:"h3"},"snapshotMapReduce"),"<",(0,s.kt)("inlineCode",{parentName:"h3"},"T1"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"T2"),">","(",(0,s.kt)("inlineCode",{parentName:"h3"},"mapCallback"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"reduceCallback"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"options"),")"),(0,s.kt)("p",null,"When a heap analysis is taking multiple heap snapshots as input for memory\nanalysis (e.g., finding which object keeps growing in size in a series of\nheap snapshots), this API could be used to do\n",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MapReduce"},"MapRedue")," on all heap snapshots."),(0,s.kt)("p",null,"This API is supposed to be used within the ",(0,s.kt)("inlineCode",{parentName:"p"},"process")," implementation\nof an ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance that is designed to analyze multiple heap\nsnapshots (as an example, finding which object keeps growing overtime)"),(0,s.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"T1")," | the type of the intermediate result from each map function call"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"T2")," | the type of the final result of the reduce function call"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mapCallback"),": (",(0,s.kt)("inlineCode",{parentName:"li"},"snapshot"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"IHeapSnapshot"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"i"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"file"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"string"),") => ",(0,s.kt)("inlineCode",{parentName:"li"},"T1")," | the map function in MapReduce, the function will be applied to each heap snapshot"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"reduceCallback"),": (",(0,s.kt)("inlineCode",{parentName:"li"},"results"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"T1"),"[]) => ",(0,s.kt)("inlineCode",{parentName:"li"},"T2")," | the reduce function in MapReduce, the function will take as input all intermediate results from all map function calls"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,s.kt)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"li"},"T2"),">"," | the return value of your reduce function"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Examples:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {snapshotMapReduce, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    // check if the number of heap objects keeps growing overtime\n    const isMonotonicIncreasing = await snapshotMapReduce<number, boolean>(\n      (heap) => heap.nodes.length,\n      (nodeCounts) =>\n        nodeCounts[0] < nodeCounts[nodeCounts.length - 1] &&\n        nodeCounts.every((count, i) => i === 0 || count >= nodeCounts[i - 1]),\n      options,\n    );\n  }\n}\n")),(0,s.kt)("p",null,"Use the following code to invoke the heap analysis:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// snapshotDir includes a series of .heapsnapshot files recorded by\n// memlab or saved manually from Chrome, those files will be loaded\n// in alphanumerically asceneding order\nawait analysis.analyzeSnapshotsInDirectory(snapshotDir);\n")),(0,s.kt)("p",null,"The new heap analysis can also be used with ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,s.kt)("inlineCode",{parentName:"p"},"snapshotMapReduce")," will use all the heap snapshot in alphanumerically\nascending order from ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Why not passing in all heap snapshots as an array of {@link IHeapSnapshot}s?"),"\nEach heap snapshot could be non-trivial in size, loading them all at once\nmay not be possible."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/8e40de5/packages/heap-analysis/src/PluginUtils.ts#L462"},"heap-analysis/src/PluginUtils.ts:462"))))))}c.isMDXComponent=!0}}]);