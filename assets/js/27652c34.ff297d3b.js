"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[673],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),k=r,u=m["".concat(p,".").concat(k)]||m[k]||d[k]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={id:"core_src.IHeapStringNode",title:"Interface: IHeapStringNode",sidebar_label:"IHeapStringNode",custom_edit_url:null},o=void 0,l={unversionedId:"api/interfaces/core_src.IHeapStringNode",id:"api/interfaces/core_src.IHeapStringNode",title:"Interface: IHeapStringNode",description:"Hierarchy",source:"@site/docs/api/interfaces/core_src.IHeapStringNode.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/core_src.IHeapStringNode",permalink:"/docs/api/interfaces/core_src.IHeapStringNode",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"core_src.IHeapStringNode",title:"Interface: IHeapStringNode",sidebar_label:"IHeapStringNode",custom_edit_url:null},sidebar:"sidebar",previous:{title:"IHeapSnapshot",permalink:"/docs/api/interfaces/core_src.IHeapSnapshot"},next:{title:"ILeakFilter",permalink:"/docs/api/interfaces/core_src.ILeakFilter"}},p={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:'<a id="dominatornode" name="dominatornode"></a> <strong>dominatorNode</strong>: <code>null</code> | <code>IHeapNode</code>',id:"-dominatornode-null--iheapnode",level:3},{value:'<a id="edge_count" name="edge_count"></a> <strong>edge_count</strong>: <code>number</code>',id:"-edge_count-number",level:3},{value:'<a id="id" name="id"></a> <strong>id</strong>: <code>number</code>',id:"-id-number",level:3},{value:'<a id="isstring" name="isstring"></a> <strong>isString</strong>: <code>boolean</code>',id:"-isstring-boolean",level:3},{value:'<a id="is_detached" name="is_detached"></a> <strong>is_detached</strong>: <code>boolean</code>',id:"-is_detached-boolean",level:3},{value:'<a id="location" name="location"></a> <strong>location</strong>: <code>null</code> | <code>IHeapLocation</code>',id:"-location-null--iheaplocation",level:3},{value:'<a id="name" name="name"></a> <strong>name</strong>: <code>string</code>',id:"-name-string",level:3},{value:'<a id="nodeindex" name="nodeindex"></a> <strong>nodeIndex</strong>: <code>number</code>',id:"-nodeindex-number",level:3},{value:'<a id="pathedge" name="pathedge"></a> <strong>pathEdge</strong>: <code>null</code> | <code>IHeapEdge</code>',id:"-pathedge-null--iheapedge",level:3},{value:'<a id="references" name="references"></a> <strong>references</strong>: <code>IHeapEdge</code>[]',id:"-references-iheapedge",level:3},{value:'<a id="referrers" name="referrers"></a> <strong>referrers</strong>: <code>IHeapEdge</code>[]',id:"-referrers-iheapedge",level:3},{value:'<a id="retainedsize" name="retainedsize"></a> <strong>retainedSize</strong>: <code>number</code>',id:"-retainedsize-number",level:3},{value:'<a id="self_size" name="self_size"></a> <strong>self_size</strong>: <code>number</code>',id:"-self_size-number",level:3},{value:'<a id="snapshot" name="snapshot"></a> <strong>snapshot</strong>: <code>IHeapSnapshot</code>',id:"-snapshot-iheapsnapshot",level:3},{value:'<a id="stringvalue" name="stringvalue"></a> <strong>stringValue</strong>: <code>string</code>',id:"-stringvalue-string",level:3},{value:'<a id="type" name="type"></a> <strong>type</strong>: <code>string</code>',id:"-type-string",level:3},{value:"Methods",id:"methods",level:2},{value:'<a id="findanyreference"></a><strong>findAnyReference</strong>(<code>predicate</code>)',id:"findanyreferencepredicate",level:3},{value:'<a id="findanyreferrer"></a><strong>findAnyReferrer</strong>(<code>predicate</code>)',id:"findanyreferrerpredicate",level:3},{value:'<a id="findreferrers"></a><strong>findReferrers</strong>(<code>predicate</code>)',id:"findreferrerspredicate",level:3},{value:'<a id="foreachreference"></a><strong>forEachReference</strong>(<code>callback</code>)',id:"foreachreferencecallback",level:3},{value:'<a id="foreachreferrer"></a><strong>forEachReferrer</strong>(<code>callback</code>)',id:"foreachreferrercallback",level:3},{value:'<a id="getanyreferrer"></a><strong>getAnyReferrer</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getanyreferreredgename-edgetype",level:3},{value:'<a id="getanyreferrernode"></a><strong>getAnyReferrerNode</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getanyreferrernodeedgename-edgetype",level:3},{value:'<a id="getreference"></a><strong>getReference</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getreferenceedgename-edgetype",level:3},{value:'<a id="getreferencenode"></a><strong>getReferenceNode</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getreferencenodeedgename-edgetype",level:3},{value:'<a id="getreferrernodes"></a><strong>getReferrerNodes</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getreferrernodesedgename-edgetype",level:3},{value:'<a id="getreferrers"></a><strong>getReferrers</strong>(<code>edgeName</code>, <code>edgeType?</code>)',id:"getreferrersedgename-edgetype",level:3},{value:'<a id="tostringnode"></a><strong>toStringNode</strong>()',id:"tostringnode",level:3}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapNode"))),(0,r.kt)("p",{parentName:"li"},"\u21b3 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"IHeapStringNode"))))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"-dominatornode-null--iheapnode"},(0,r.kt)("a",{id:"dominatornode",name:"dominatornode"})," ",(0,r.kt)("strong",{parentName:"h3"},"dominatorNode"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapNode"))),(0,r.kt)("p",null,"get the dominator node of this node. If the dominator node gets released\nthere will be no path from GC to this node, and therefore this node can\nalso be released.\nFor more information on what a dominator node is, please check out\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/memory-problems/memory-101/#dominators"},"this doc"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1252"},"core/src/lib/Types.ts:1252"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-edge_count-number"},(0,r.kt)("a",{id:"edge\\_count",name:"edge\\_count"})," ",(0,r.kt)("strong",{parentName:"h3"},"edge","_","count"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The total number of outgoing JS references (including engine-internal,\nnative, and JS references)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1216"},"core/src/lib/Types.ts:1216"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-id-number"},(0,r.kt)("a",{id:"id",name:"id"})," ",(0,r.kt)("strong",{parentName:"h3"},"id"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"unique id of the heap object"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1186"},"core/src/lib/Types.ts:1186"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-isstring-boolean"},(0,r.kt)("a",{id:"isstring",name:"isstring"})," ",(0,r.kt)("strong",{parentName:"h3"},"isString"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,r.kt)("p",null,"check if this a string node (normal string node, concatenated string node\nor sliced string node)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1264"},"core/src/lib/Types.ts:1264"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-is_detached-boolean"},(0,r.kt)("a",{id:"is\\_detached",name:"is\\_detached"})," ",(0,r.kt)("strong",{parentName:"h3"},"is","_","detached"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the heap object is a DOM element and the DOM element is detached\nfrom the DOM tree, ",(0,r.kt)("inlineCode",{parentName:"p"},"is_detached")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),";")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the heap object is a React Fiber node and the Fiber node is unmounted\nfrom the React Fiber tree, ",(0,r.kt)("inlineCode",{parentName:"p"},"is_detached")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),";\notherwise it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Source"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1198"},"core/src/lib/Types.ts:1198"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-location-null--iheaplocation"},(0,r.kt)("a",{id:"location",name:"location"})," ",(0,r.kt)("strong",{parentName:"h3"},"location"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapLocation"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapLocation"))),(0,r.kt)("p",null,"source location information of this heap object (if it is recorded by\nthe heap snapshot)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1257"},"core/src/lib/Types.ts:1257"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-name-string"},(0,r.kt)("a",{id:"name",name:"name"})," ",(0,r.kt)("strong",{parentName:"h3"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"string")),(0,r.kt)("p",null,"this is the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field associated with the heap object,\nfor JS object instances (type ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is the constructor's name\nof the object instance. for ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is the string value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1182"},"core/src/lib/Types.ts:1182"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-nodeindex-number"},(0,r.kt)("a",{id:"nodeindex",name:"nodeindex"})," ",(0,r.kt)("strong",{parentName:"h3"},"nodeIndex"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"index of this heap object inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"node.snapshot.nodes")," pseudo array"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1237"},"core/src/lib/Types.ts:1237"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-pathedge-null--iheapedge"},(0,r.kt)("a",{id:"pathedge",name:"pathedge"})," ",(0,r.kt)("strong",{parentName:"h3"},"pathEdge"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge"))),(0,r.kt)("p",null,"The incoming edge which leads to the parent node\non the shortest path to GC root."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1233"},"core/src/lib/Types.ts:1233"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-references-iheapedge"},(0,r.kt)("a",{id:"references",name:"references"})," ",(0,r.kt)("strong",{parentName:"h3"},"references"),": ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),"[]"),(0,r.kt)("p",null,"Get a JS array containing all outgoing JS references from this heap object\n(including engine-internal, native, and JS references)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1223"},"core/src/lib/Types.ts:1223"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-referrers-iheapedge"},(0,r.kt)("a",{id:"referrers",name:"referrers"})," ",(0,r.kt)("strong",{parentName:"h3"},"referrers"),": ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),"[]"),(0,r.kt)("p",null,"Get a JS array containing all incoming JS references pointing to this heap\nobject (including engine-internal, native, and JS references)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1228"},"core/src/lib/Types.ts:1228"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-retainedsize-number"},(0,r.kt)("a",{id:"retainedsize",name:"retainedsize"})," ",(0,r.kt)("strong",{parentName:"h3"},"retainedSize"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"retained size")," of the heap object (i.e., the total size of memory that\ncould be released if this object is released). For difference between\n",(0,r.kt)("strong",{parentName:"p"},"retained size")," and ",(0,r.kt)("strong",{parentName:"p"},"shallow size"),", check out\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/memory-problems/memory-101/#object_sizes"},"this doc"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1244"},"core/src/lib/Types.ts:1244"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-self_size-number"},(0,r.kt)("a",{id:"self\\_size",name:"self\\_size"})," ",(0,r.kt)("strong",{parentName:"h3"},"self","_","size"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"shallow size")," of the heap object (i.e., the size of memory that is held\nby the object itself.). For difference between ",(0,r.kt)("strong",{parentName:"p"},"shallow size")," and\n",(0,r.kt)("strong",{parentName:"p"},"retained size"),", check out\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/memory-problems/memory-101/#object_sizes"},"this doc"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1211"},"core/src/lib/Types.ts:1211"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-snapshot-iheapsnapshot"},(0,r.kt)("a",{id:"snapshot",name:"snapshot"})," ",(0,r.kt)("strong",{parentName:"h3"},"snapshot"),": ",(0,r.kt)("a",{parentName:"h3",href:"/docs/api/interfaces/core_src.IHeapSnapshot"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapSnapshot"))),(0,r.kt)("p",null,"get the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapSnapshot"},"IHeapSnapshot")," containing this heap object"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1190"},"core/src/lib/Types.ts:1190"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-stringvalue-string"},(0,r.kt)("a",{id:"stringvalue",name:"stringvalue"})," ",(0,r.kt)("strong",{parentName:"h3"},"stringValue"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"string")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1482"},"core/src/lib/Types.ts:1482"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-type-string"},(0,r.kt)("a",{id:"type",name:"type"})," ",(0,r.kt)("strong",{parentName:"h3"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"string")),(0,r.kt)("p",null,"the type of the heap node object. All possible types:\nThis is engine-specific, for example all types in V8:\n",(0,r.kt)("inlineCode",{parentName:"p"},"hidden"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"closure"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"regexp"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"native"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"synthetic"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"concatenated string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sliced string"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1176"},"core/src/lib/Types.ts:1176"))))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"findanyreferencepredicate"},(0,r.kt)("a",{id:"findanyreference"}),(0,r.kt)("strong",{parentName:"h3"},"findAnyReference"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"predicate"),")"),(0,r.kt)("p",null,"executes a provided predicate callback once for each JavaScript reference\nin the hosting node (or outgoing edges from the node) until the predicate\nreturns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"predicate"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/modules/core_src#predicator"},(0,r.kt)("inlineCode",{parentName:"a"},"Predicator")),"<",(0,r.kt)("a",{parentName:"li",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the callback for each outgoing JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the first outgoing edge for which the predicate returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),",\notherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no such edge is found.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const reference = node.findAnyReference((edge: IHeapEdge) => {\n  // find the outgoing reference with name \"ref\"\n  return edge.name_or_index === 'ref';\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1323"},"core/src/lib/Types.ts:1323"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findanyreferrerpredicate"},(0,r.kt)("a",{id:"findanyreferrer"}),(0,r.kt)("strong",{parentName:"h3"},"findAnyReferrer"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"predicate"),")"),(0,r.kt)("p",null,"executes a provided predicate callback once for each JavaScript reference\npointing to the hosting node (or incoming edges to the node) until the\npredicate returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"predicate"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/modules/core_src#predicator"},(0,r.kt)("inlineCode",{parentName:"a"},"Predicator")),"<",(0,r.kt)("a",{parentName:"li",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the callback for each incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the first incoming edge for which the predicate returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),",\notherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no such edge is found.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const referrer = node.findAnyReferrer((edge: IHeapEdge) => {\n  // find the incoming reference with name \"ref\"\n  return edge.name_or_index === 'ref';\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1340"},"core/src/lib/Types.ts:1340"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findreferrerspredicate"},(0,r.kt)("a",{id:"findreferrers"}),(0,r.kt)("strong",{parentName:"h3"},"findReferrers"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"predicate"),")"),(0,r.kt)("p",null,"executes a provided predicate callback once for each JavaScript reference\npointing to the hosting node (or incoming edges to the node)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"predicate"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/modules/core_src#predicator"},(0,r.kt)("inlineCode",{parentName:"a"},"Predicator")),"<",(0,r.kt)("a",{parentName:"li",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the callback for each incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),"[] | an array containing all the incoming edges for which the\npredicate returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", otherwise returns an empty array if no such\nedge is found.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const referrers = node.findReferrers((edge: IHeapEdge) => {\n  // find all the incoming references with name \"ref\"\n  return edge.name_or_index === 'ref';\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1357"},"core/src/lib/Types.ts:1357"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"foreachreferencecallback"},(0,r.kt)("a",{id:"foreachreference"}),(0,r.kt)("strong",{parentName:"h3"},"forEachReference"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"callback"),")"),(0,r.kt)("p",null,"executes a provided callback once for each JavaScript reference in the\nhosting node (or outgoing edges from the node)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/modules/core_src#edgeiterationcallback"},(0,r.kt)("inlineCode",{parentName:"a"},"EdgeIterationCallback"))," | the callback for each outgoing JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," | this API returns void")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"node.forEachReference((edge: IHeapEdge) => {\n  // process edge ...\n\n  // if no need to iterate over remaining edges after\n  // the current edge in the node.references list\n  return {stop: true};\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1288"},"core/src/lib/Types.ts:1288"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"foreachreferrercallback"},(0,r.kt)("a",{id:"foreachreferrer"}),(0,r.kt)("strong",{parentName:"h3"},"forEachReferrer"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"callback"),")"),(0,r.kt)("p",null,"executes a provided callback once for each JavaScript reference pointing\nto the hosting node (or incoming edges to the node)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/modules/core_src#edgeiterationcallback"},(0,r.kt)("inlineCode",{parentName:"a"},"EdgeIterationCallback"))," | the callback for each incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," | this API returns void")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"node.forEachReferrer((edge: IHeapEdge) => {\n  // process edge ...\n\n  // if no need to iterate over remaining edges after\n  // the current edge in the node.referrers list\n  return {stop: true};\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1306"},"core/src/lib/Types.ts:1306"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getanyreferreredgename-edgetype"},(0,r.kt)("a",{id:"getanyreferrer"}),(0,r.kt)("strong",{parentName:"h3"},"getAnyReferrer"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds an incoming JS\nreference pointing to the hosting node."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the incoming JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the incoming edge that meets the specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find one of the JS reference named \"ref\" pointing to node\nconst reference = node.getAnyReferrer('ref', 'property');\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1412"},"core/src/lib/Types.ts:1412"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getanyreferrernodeedgename-edgetype"},(0,r.kt)("a",{id:"getanyreferrernode"}),(0,r.kt)("strong",{parentName:"h3"},"getAnyReferrerNode"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds one of the incoming JS\nreferences pointing to the hosting node, and returns the JS heap object\ncontaining the incoming reference."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the incoming JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapNode")),">"," | the node containing the incoming JS reference that meets\nthe specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find one of the JS heap object with a JS reference\n// named \"ref\" pointing to node\nconst n1 = node.getAnyReferrerNode('ref', 'property');\n// this is equivalent to\nconst n2 = node.getAnyReferrer('ref', 'property')?.fromNode;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1435"},"core/src/lib/Types.ts:1435"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getreferenceedgename-edgetype"},(0,r.kt)("a",{id:"getreference"}),(0,r.kt)("strong",{parentName:"h3"},"getReference"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds an outgoing JS\nreference from the hosting node."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the outgoing JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the outgoing JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),">"," | the outgoing edge that meets the specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find the internal reference to node's hidden class\nconst reference = node.getReference('map', 'hidden');\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1372"},"core/src/lib/Types.ts:1372"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getreferencenodeedgename-edgetype"},(0,r.kt)("a",{id:"getreferencenode"}),(0,r.kt)("strong",{parentName:"h3"},"getReferenceNode"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds the outgoing JS\nreference from the hosting node, and returns the JS heap object pointed to\nby the outgoing JS reference."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the outgoing JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the outgoing JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapNode")),">"," | the node pointed to by the outgoing reference that meets\nthe specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find the node's hidden class\nconst hiddenClassNode = node.getReferenceNode('map', 'hidden');\n// this is equivalent to\nconst hiddenClassNode2 = node.getReference('map', 'hidden')?.toNode;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1394"},"core/src/lib/Types.ts:1394"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getreferrernodesedgename-edgetype"},(0,r.kt)("a",{id:"getreferrernodes"}),(0,r.kt)("strong",{parentName:"h3"},"getReferrerNodes"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds all of the incoming JS\nreferences pointing to the hosting node, and returns an array containing\nthe hosting node for each of the incoming JS references."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the incoming JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapNode")),"[] | an array containing the hosting nodes, with each node corresponds\nto each incoming JS reference that meets the specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find all of the JS heap object with a JS reference\n// named \"ref\" pointing to node\nconst nodes1 = node.getReferrerNodes('ref', 'property');\n// this is equivalent to\nconst nodes2 = node.getReferrers('ref', 'property')\n  .map(edge => edge.fromNode);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1475"},"core/src/lib/Types.ts:1475"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getreferrersedgename-edgetype"},(0,r.kt)("a",{id:"getreferrers"}),(0,r.kt)("strong",{parentName:"h3"},"getReferrers"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeName"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"edgeType?"),")"),(0,r.kt)("p",null,"Given a JS reference's name and type, this API finds all the incoming JS\nreference pointing to the hosting node."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeName"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," | the name of the incoming JavaScript reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edgeType?"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | optional parameter specifying the type of the incoming JavaScript reference"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapEdge"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapEdge")),"[] | an array containing all the incoming edges that\nmeet the specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// find all of of the JS reference named \"ref\" pointing to node\nconst referrers = node.getReferrers('ref', 'property');\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1454"},"core/src/lib/Types.ts:1454"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"tostringnode"},(0,r.kt)("a",{id:"tostringnode"}),(0,r.kt)("strong",{parentName:"h3"},"toStringNode"),"()"),(0,r.kt)("p",null,"convert to an ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapStringNode"},"IHeapStringNode")," object if this node is a string node.\nThe ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.IHeapStringNode"},"IHeapStringNode")," object supports querying the string content\ninside the string node."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable"),"<",(0,r.kt)("a",{parentName:"li",href:"/docs/api/interfaces/core_src.IHeapStringNode"},(0,r.kt)("inlineCode",{parentName:"a"},"IHeapStringNode")),">"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/b3be631/packages/core/src/lib/Types.ts#L1270"},"core/src/lib/Types.ts:1270"))))))}d.isMDXComponent=!0}}]);