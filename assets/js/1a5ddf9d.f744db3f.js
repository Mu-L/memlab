"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[787],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=r,b=u["".concat(s,".").concat(p)]||u[p]||d[p]||i;return t?a.createElement(b,o(o({ref:n},m),{},{components:t})):a.createElement(b,o({ref:n},m))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={id:"guides-find-leaks"},o="Finding a Leak",l={unversionedId:"guides/guides-find-leaks",id:"guides/guides-find-leaks",title:"Finding a Leak",description:"Let's say there is a case you know that memory leaks exist but memlab is not showing it as a leak. However, you want to see them all.",source:"@site/docs/guides/03-find-leak.md",sourceDirName:"guides",slug:"/guides/guides-find-leaks",permalink:"/docs/guides/guides-find-leaks",draft:!1,editUrl:"https://github.com/facebookincubator/memlab/blob/main/website/docs/guides/03-find-leak.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"guides-find-leaks"},sidebar:"sidebar",previous:{title:"Detect Oversized Object",permalink:"/docs/guides/guides-detect-oversized-object"},next:{title:"How memlab Works",permalink:"/docs/how-memlab-works"}},s={},c=[],m={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"finding-a-leak"},"Finding a Leak"),(0,r.kt)("p",null,"Let's say there is a case you know that memory leaks exist but ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," is not showing it as a leak. However, you want to see them all."),(0,r.kt)("p",null,"Let's start by running the following command. Make sure to not specify any leak\nfilter in the scenario file. MemLab will apply its build-in leak detectors\nwhich finds detached DOM elements and unmounted React Fiber nodes.\nSometimes this may not detect any memory leaks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"memlab run --scenario ~/memlab/scenarios/unbound-object.js\n")),(0,r.kt)("p",null,"Now let's run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"memlab find-leaks --trace-all-objects\n")),(0,r.kt)("p",null,"This will ask memlab to treat every object allocated by the target interaction\nas a memory leak. In this case, there are a bunch of objects not\nreleased from the target interaction."),(0,r.kt)("p",null,"memlab clusters the retainer traces of the leaked objects and print them in\ndecreasing order based on the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/memory-problems/memory-101/#retained_size"},"aggregated retained sizes")," of leak clusters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MemLab found 46 leak(s)\n--Similar leaks in this run: 4--\n--Retained size of leaked objects: 8.3MB--\n[Window] (native) @35847 [8.3MB]\n  --20 (element)---\x3e  [InternalNode] (native) @130981728 [8.3MB]\n  --8 (element)---\x3e  [InternalNode] (native) @130980288 [8.3MB]\n  --1 (element)---\x3e  [EventListener] (native) @131009888 [8.3MB]\n  --1 (element)---\x3e  [V8EventListener] (native) @224808192 [8.3MB]\n  --1 (element)---\x3e  [eventHandler] (closure) @168079 [8.3MB]\n  --context (internal)---\x3e  [<function scope>] (object) @181905 [8.3MB]\n  --bigArray (variable)---\x3e  [Array] (object) @182925 [8.3MB]\n  --elements (internal)---\x3e  [(object elements)] (array) @182929 [8.3MB]\n\n\n--Similar leaks in this run: 79--\n--Retained size of leaked objects: 16.9KB--\n[Window] (native) @35847 [8.3MB]\n  --17 (element)---\x3e  [InternalNode] (native) @224820352 [0 byte]\n  --3 (element)---\x3e  [InternalNode] (native) @224766112 [0 byte]\n  --1 (element)---\x3e  [InternalNode] (native) @224771072 [0 byte]\n  --1 (element)---\x3e  [InternalNode] (native) @224723840 [540 bytes]\n  --1 (element)---\x3e  [InternalNode] (native) @224723680 [540 bytes]\n  --1 (element)---\x3e  [InternalNode] (native) @224818752 [84 bytes]\n\n\n--Similar leaks in this run: 62--\n--Retained size of leaked objects: 12.8KB--\n[Window] (native) @35847 [8.3MB]\n  --4 (element)---\x3e  [HTMLDocument] (native) @35845 [6KB]\n  --part of key -> value pair in ephemeron table (internal)---\x3e  [HTMLDocument] (object) @167199 [28 bytes]\n  --__proto__ (property)---\x3e  [HTMLDocument] (object) @173029 [144 bytes]\n  --properties (internal)---\x3e  [(object properties)] (array) @182697 [76 bytes]\n\n...\n")),(0,r.kt)("p",null,"One way to view the retainer traces in a slightly less verbose would be to apply\n",(0,r.kt)("a",{parentName:"p",href:"/docs/api/interfaces/core_src.ILeakFilter"},"leak-filter")," or to use ",(0,r.kt)("inlineCode",{parentName:"p"},"--trace-object-size-above"),".\nThe below will only show the traces whose ",(0,r.kt)("inlineCode",{parentName:"p"},"retainedSize")," is greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"1MB")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"memlab find-leaks --trace-object-size-above 1000000\n")),(0,r.kt)("p",null,"The result will look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MemLab found 1 leak(s)\n--Similar leaks in this run: 4--\n--Retained size of leaked objects: 8.3MB--\n[Window] (native) @33651 [8.3MB]\n  --20 (element)---\x3e  [InternalNode] (native) @216691968 [8.3MB]\n  --8 (element)---\x3e  [InternalNode] (native) @216691168 [8.3MB]\n  --1 (element)---\x3e  [EventListener] (native) @216563936 [8.3MB]\n  --1 (element)---\x3e  [V8EventListener] (native) @216563776 [8.3MB]\n  --1 (element)---\x3e  [eventHandler] (closure) @160711 [8.3MB]\n  --context (internal)---\x3e  [<function scope>] (object) @176463 [8.3MB]\n  --bigArray (variable)---\x3e  [Array] (object) @176465 [8.3MB]\n  --elements (internal)---\x3e  [(object elements)] (array) @176489 [8.3MB]\n")),(0,r.kt)("p",null,"Another options is using ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore-leak-cluster-size-below")," which ignore memory\nleak clusters with aggregated retained size smaller than a specified threshold.\nTo learn more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"find-leaks")," command, please run ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab find-leaks -h"),"."))}d.isMDXComponent=!0}}]);