"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[719],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9906:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},i="How memlab Works",l={unversionedId:"how-memlab-works",id:"how-memlab-works",title:"How memlab Works",description:"memlab decodes v8 (and hermes) heap snapshots and provides API that allows you to query JavaScript heap objects.",source:"@site/docs/how-memlab-works.md",sourceDirName:".",slug:"/how-memlab-works",permalink:"/docs/how-memlab-works",draft:!1,editUrl:"https://github.com/facebookincubator/memlab/blob/main/website/docs/how-memlab-works.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Table of contents",permalink:"/docs/api/"}},s={},p=[{value:"Heap Analysis",id:"heap-analysis",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-memlab-works"},"How memlab Works"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," decodes v8 (and hermes) heap snapshots and ",(0,r.kt)("a",{parentName:"p",href:"/under-construction"},"provides API")," that allows you to query JavaScript heap objects."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," starts a headless Chrome browser to interact (loading a page, performing an action, and going back) with the pages. Then, it takes heap snapshots. For example, if we want to find leaked objects on target page ",(0,r.kt)("inlineCode",{parentName:"p"},"TP"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," visits pages in the following order:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Visit a different page - let's call it baseline page ",(0,r.kt)("inlineCode",{parentName:"li"},"BP")," and take a heap snapshot named ",(0,r.kt)("inlineCode",{parentName:"li"},"SBP")),(0,r.kt)("li",{parentName:"ul"},"Visit the target page ",(0,r.kt)("inlineCode",{parentName:"li"},"TP")," and take another heap snapshot\n",(0,r.kt)("inlineCode",{parentName:"li"},"STP")),(0,r.kt)("li",{parentName:"ul"},"Finally come back to the baseline page (",(0,r.kt)("inlineCode",{parentName:"li"},"BP"),"), and take the last heap snapshot ",(0,r.kt)("inlineCode",{parentName:"li"},"SBP'"),".\nWith these heap snapshots, ",(0,r.kt)("inlineCode",{parentName:"li"},"memlab")," find memory leaks as explained in the next section.")),(0,r.kt)("h2",{id:"heap-analysis"},"Heap Analysis"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," parses the raw snapshot and applies leak detection algorithms. A superset of leaked objects from the target page can be derived as follows:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(STP \\ SPB) \u2229 SPB'")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," excludes a set of allocated objects ",(0,r.kt)("inlineCode",{parentName:"p"},"SPB")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"SPT"),". Then it intersects with ",(0,r.kt)("inlineCode",{parentName:"p"},"SPB'")," to get the objects that are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allocated in the snapshot of target page ",(0,r.kt)("inlineCode",{parentName:"li"},"STP")),(0,r.kt)("li",{parentName:"ul"},"and remain alive after memlab navigates away.")),(0,r.kt)("p",null,"We also use domain-specific heuristics to further refine the list of leaked objects (e.g., detached DOM elements, error stack trace, etc. ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab")," also identifies React Fiber tree and detects detached Fiber nodes). We would love to hear if there are other such application-specific rules for identifying leaks."))}c.isMDXComponent=!0}}]);