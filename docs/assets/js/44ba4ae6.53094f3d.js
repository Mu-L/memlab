"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[719],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9906:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="How memlab Works",p={unversionedId:"how-memlab-works",id:"how-memlab-works",title:"How memlab Works",description:"memlab decodes v8 (and hermes) heap snapshots and provides API that allows you to query JavaScript heap objects.",source:"@site/docs/how-memlab-works.md",sourceDirName:".",slug:"/how-memlab-works",permalink:"/docs/how-memlab-works",draft:!1,editUrl:"https://github.com/facebookincubator/memlab/blob/main/website/docs/how-memlab-works.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"API",permalink:"/docs/api/"}},c={},m=[{value:"Heap Analysis",id:"heap-analysis",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-memlab-works"},"How memlab Works"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," decodes v8 (and hermes) heap snapshots and ",(0,o.kt)("a",{parentName:"p",href:"/docs/heap/querying"},"provides API")," that allows you to query JavaScript heap objects."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," starts a headless Chrome browser to interact (loading a page, performing an action, and going back) with the pages. Then, it takes heap snapshots. For example, if we want to find leaked objects on target page ",(0,o.kt)("inlineCode",{parentName:"p"},"TP"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," visits pages in the following order:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Visit a different page - let's call it baseline page ",(0,o.kt)("inlineCode",{parentName:"li"},"BP")," and take a heap snapshot named ",(0,o.kt)("inlineCode",{parentName:"li"},"SBP")),(0,o.kt)("li",{parentName:"ul"},"Visit the target page ",(0,o.kt)("inlineCode",{parentName:"li"},"TP")," and take another heap snapshot\n",(0,o.kt)("inlineCode",{parentName:"li"},"STP")),(0,o.kt)("li",{parentName:"ul"},"Finally come back to the baseline page (",(0,o.kt)("inlineCode",{parentName:"li"},"BP"),"), and take the last heap snapshot ",(0,o.kt)("inlineCode",{parentName:"li"},"SBP'"),".\nWith these heap snapshots, ",(0,o.kt)("inlineCode",{parentName:"li"},"memlab")," find memory leaks as explained in the next section.")),(0,o.kt)("h2",{id:"heap-analysis"},"Heap Analysis"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," parses the raw snapshot and applies leak detection algorithms. A superset of leaked objects from the target page can be derived as follows:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(STP \\ SPB) \u2229 SPB'")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," excludes a set of allocated objects ",(0,o.kt)("inlineCode",{parentName:"p"},"SPB")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"SPT"),". Then it intersects with ",(0,o.kt)("inlineCode",{parentName:"p"},"SPB'")," to get the objects that are"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"allocated in the snapshot of target page ",(0,o.kt)("inlineCode",{parentName:"li"},"STP")),(0,o.kt)("li",{parentName:"ul"},"and remain alive after memlab navigates away.")),(0,o.kt)("p",null,"We also use domain-specific heuristics to further refine the list of leaked objects (e.g., detached DOM elements, error stack trace, etc. ",(0,o.kt)("inlineCode",{parentName:"p"},"memlab")," also identifies React Fiber tree and detects detached Fiber nodes). We would love to hear if there are other such application-specific rules for identifying leaks."))}u.isMDXComponent=!0}}]);